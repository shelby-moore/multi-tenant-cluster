---
# Source: netchecks/templates/netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netchecks-operator
  labels:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: netchecks
      app.kubernetes.io/instance: netchecks-operator
  policyTypes:
    - Egress

  egress:
    # Allow operator to talk to anything. Would be better to restrict to K8s API
    - {}
---
# Source: netchecks/charts/policy-reporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netchecks-operator-policy-reporter
  namespace: netchecks
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
---
# Source: netchecks/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netcheck-operator
  labels:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
---
# Source: netchecks/charts/policy-reporter/templates/config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: netchecks-operator-policy-reporter-config
  namespace: netchecks
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
type: Opaque
data:
  config.yaml: bG9raToKICBob3N0OiAiIgogIGNlcnRpZmljYXRlOiAiIgogIHNraXBUTFM6IGZhbHNlCiAgcGF0aDogIiIKICBzZWNyZXRSZWY6ICIiCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKZWxhc3RpY3NlYXJjaDoKICBob3N0OiAiIgogIGNlcnRpZmljYXRlOiAiIgogIHNraXBUTFM6IGZhbHNlCiAgdXNlcm5hbWU6ICIiCiAgcGFzc3dvcmQ6ICIiCiAgc2VjcmV0UmVmOiAiIgogIGluZGV4OiAicG9saWN5LXJlcG9ydGVyIgogIHJvdGF0aW9uOiAiZGFpbHkiCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKc2xhY2s6CiAgd2ViaG9vazogIiIKICBzZWNyZXRSZWY6ICIiCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKZGlzY29yZDoKICB3ZWJob29rOiAiIgogIHNlY3JldFJlZjogIiIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgp0ZWFtczoKICB3ZWJob29rOiAiIgogIGNlcnRpZmljYXRlOiAiIgogIHNraXBUTFM6IGZhbHNlCiAgc2VjcmV0UmVmOiAiIgogIG1pbmltdW1Qcmlvcml0eTogIiIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCndlYmhvb2s6CiAgaG9zdDogIiIKICBjZXJ0aWZpY2F0ZTogIiIKICBza2lwVExTOiBmYWxzZQogIHNlY3JldFJlZjogIiIKICBtaW5pbXVtUHJpb3JpdHk6ICIiCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgp1aToKICBob3N0OiBodHRwOi8vbmV0Y2hlY2tzLW9wZXJhdG9yLXVpOjgwODAKICBjZXJ0aWZpY2F0ZTogIiIKICBza2lwVExTOiBmYWxzZQogIG1pbmltdW1Qcmlvcml0eTogIndhcm5pbmciCiAgc2tpcEV4aXN0aW5nT25TdGFydHVwOiB0cnVlCgpzMzoKICBhY2Nlc3NLZXlJRDogCiAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgc2VjcmV0UmVmOiAiIgogIHJlZ2lvbjogCiAgZW5kcG9pbnQ6IAogIGJ1Y2tldDogCiAgcGF0aFN0eWxlOiBmYWxzZQogIHByZWZpeDogCiAgbWluaW11bVByaW9yaXR5OiAiIgogIHNraXBFeGlzdGluZ09uU3RhcnR1cDogdHJ1ZQoKa2luZXNpczoKICBhY2Nlc3NLZXlJRDogCiAgc2VjcmV0QWNjZXNzS2V5OiAgCiAgc2VjcmV0UmVmOiAiIgogIHJlZ2lvbjogCiAgZW5kcG9pbnQ6IAogIHN0cmVhbU5hbWU6IAogIG1pbmltdW1Qcmlvcml0eTogIiIKICBza2lwRXhpc3RpbmdPblN0YXJ0dXA6IHRydWUKCm1ldHJpY3M6CiAgbW9kZTogZGV0YWlsZWQKCnJlcG9ydEZpbHRlcjoKICBuYW1lc3BhY2VzOgogIGNsdXN0ZXJSZXBvcnRzOgogICAgZGlzYWJsZWQ6IGZhbHNlCgpsZWFkZXJFbGVjdGlvbjoKICBlbmFibGVkOiBmYWxzZQogIHJlbGVhc2VPbkNhbmNlbDogdHJ1ZQogIGxlYXNlRHVyYXRpb246IDE1CiAgcmVuZXdEZWFkbGluZTogMTAKICByZXRyeVBlcmlvZDogMgpyZWRpczoKICBhZGRyZXNzOiAiIgogIGRhdGFiYXNlOiAwCiAgZW5hYmxlZDogZmFsc2UKICBwYXNzd29yZDogIiIKICBwcmVmaXg6IHBvbGljeS1yZXBvcnRlcgogIHVzZXJuYW1lOiAiIgo=
---
# Source: netchecks/charts/policy-reporter/charts/ui/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: netchecks-operator-ui-config
  namespace: netchecks
  labels:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "1.7.1"
    app.kubernetes.io/component: ui
    app.kubernetes.io/part-of: policy-reporter
data:
  config.yaml: |-
    logSize: 200
    displayMode: ""
    refreshInterval: 10000
    clusterName: ""
    views:
      dashboard:
        policyReports: true
        clusterPolicyReports: true
      logs: true
      policyReports: true
      clusterPolicyReports: true
      kyvernoPolicies: true
      kyvernoVerifyImages: true
    redis:
      address: ""
      database: 0
      enabled: false
      password: ""
      prefix: policy-reporter-ui
      username: ""
---
# Source: netchecks/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: netchecks-operator
  labels: 
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
data:
  config.json: |-
    {
      "probe": {
        "image": {"pullPolicy":"Always","repository":"ghcr.io/hardbyte/netchecks","tag":"main"},
        "imagePullSecrets": [],
        "podAnnotations": {}
        }
    }
---
# Source: netchecks/charts/policy-reporter/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: netchecks-operator-policy-reporter
rules:
- apiGroups:
  - '*'
  resources:
  - policyreports
  - policyreports/status
  - clusterpolicyreports
  - clusterpolicyreports/status
  verbs:
  - get
  - list
  - watch
---
# Source: netchecks/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netchecks-operator
rules:
  # Kopf Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Kopf Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]

  # Kopf Framework: admission webhook configuration management.
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]

  # This could be restricted to our operator namespace
  # Framework: posting the events about the handlers progress/errors.
  - apiGroups: [""]
    resources: [events]
    verbs: [create]

  # Application: Access to our NetworkAssertions cluster-wide
  # Note we don't create or delete them - that's up to the user.
  - apiGroups: [netchecks.io]
    resources: [networkassertions]
    verbs: [list, get, watch, patch, update]

  - apiGroups: [wgpolicyk8s.io]
    resources: [policyreports]
    verbs: [list, get, patch, create, update, watch]

  # Application: other resources we produce and manipulate
  # The operator can create CronJobs, Jobs, and ConfigMaps but we don't delete them.
  - apiGroups: [batch, extensions]
    resources: [jobs, cronjobs]
    verbs: [create, delete]
  # We directly create config maps. At some point we may need to patch them.
  - apiGroups: [""]
    resources: [configmaps]
    verbs: [create]

  # The can be restricted to our operator namespace:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "patch"]

  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list", "watch"]
---
# Source: netchecks/charts/policy-reporter/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netchecks-operator-policy-reporter
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: ClusterRole
  name: netchecks-operator-policy-reporter
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: netchecks-operator-policy-reporter
  namespace: netchecks
---
# Source: netchecks/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netchecks-operator
  labels:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netchecks-operator
subjects:
  - kind: ServiceAccount
    name: netcheck-operator
    namespace: 'netchecks'
---
# Source: netchecks/charts/policy-reporter/templates/secret-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
  name: netchecks-operator-policy-reporter-secret-reader
  namespace: netchecks
rules:
- apiGroups: ['']
  resources:
  - secrets
  verbs:
  - get
---
# Source: netchecks/charts/policy-reporter/templates/secret-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: netchecks-operator-policy-reporter-secret-reader
  namespace: netchecks
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
roleRef:
  kind: Role
  name: netchecks-operator-policy-reporter-secret-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: "ServiceAccount"
  name: netchecks-operator-policy-reporter
  namespace: netchecks
---
# Source: netchecks/charts/policy-reporter/charts/ui/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: netchecks-operator-ui
  namespace: netchecks
  labels:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "1.7.1"
    app.kubernetes.io/component: ui
    app.kubernetes.io/part-of: policy-reporter
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: netchecks-operator
---
# Source: netchecks/charts/policy-reporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: netchecks-operator-policy-reporter
  namespace: netchecks
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
---
# Source: netchecks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: netchecks-operator
  labels:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
---
# Source: netchecks/charts/policy-reporter/charts/ui/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netchecks-operator-ui
  namespace: netchecks
  labels:
    app.kubernetes.io/name: ui
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "1.7.1"
    app.kubernetes.io/component: ui
    app.kubernetes.io/part-of: policy-reporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ui
      app.kubernetes.io/instance: netchecks-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ui
        app.kubernetes.io/instance: netchecks-operator
        app.kubernetes.io/version: "1.7.1"
        app.kubernetes.io/part-of: policy-reporter
      annotations:
        checksum/config: "655ae5ca58afbb9160b03b2b96093eb8ea5b8e20074464114c7c276493f1410a"
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      containers:
        - name: ui
          image: "ghcr.io/kyverno/policy-reporter-ui:1.7.1"
          imagePullPolicy: IfNotPresent
          securityContext: 
            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          args:
            - -config=/app/config.yaml
            - -policy-reporter=http://netchecks-operator-policy-reporter:8080
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          resources:
            {}
      volumes:
      - name: config-file
        configMap:
          name: netchecks-operator-ui-config
---
# Source: netchecks/charts/policy-reporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netchecks-operator-policy-reporter
  namespace: netchecks
  labels:
    app.kubernetes.io/name: policy-reporter
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "2.11.1"
    app.kubernetes.io/component: reporting
    app.kubernetes.io/part-of: policy-reporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: policy-reporter
      app.kubernetes.io/instance: netchecks-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: policy-reporter
        app.kubernetes.io/instance: netchecks-operator
        app.kubernetes.io/version: "2.11.1"
        app.kubernetes.io/part-of: policy-reporter
      annotations:
        checksum/secret: "1c79a5c861822c7c48966bcd8a71fe0617c56e963f1bc9d5259f1579eb40d226"
    spec:
      serviceAccountName: netchecks-operator-policy-reporter
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1234
      containers:
        - name: policy-reporter
          image: "ghcr.io/kyverno/policy-reporter:2.11.1"
          imagePullPolicy: IfNotPresent
          securityContext: 
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1234
            seccompProfile:
              type: RuntimeDefault
          args:
            - --port=8080
            - --config=/app/config.yaml
            - --dbfile=/sqlite/database.db
            - --metrics-enabled=true
            - --rest-enabled=true
            - --profile=false
            - --lease-name=netchecks-operator-policy-reporter
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          volumeMounts:
          - name: sqlite
            mountPath: /sqlite
          - name: config-file
            mountPath: /app/config.yaml
            subPath: config.yaml
            readOnly: true
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      volumes:
      - name: sqlite
        emptyDir: {}
      - name: config-file
        secret:
          secretName: netchecks-operator-policy-reporter-config
          optional: true
---
# Source: netchecks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netchecks-operator
  labels:
    app.kubernetes.io/name: netchecks
    app.kubernetes.io/instance: netchecks-operator
    app.kubernetes.io/version: "0.1.1"
spec:
  # Please note that only one replica is required for the operator
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: netchecks
      app.kubernetes.io/instance: netchecks-operator
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: netchecks
        app.kubernetes.io/instance: netchecks-operator
    spec:
      serviceAccountName: netcheck-operator
      securityContext:
        {}
      containers:
        - name: netchecks
          securityContext:
            {}
          image: "ghcr.io/hardbyte/netchecks-operator:main"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          resources:
            {}
          env:
            - name: JSON_CONFIG
              value: /var/config/config.json
          volumeMounts:
            - mountPath: /var/config
              name: config-file
              readOnly: true
      volumes:
        - name: config-file
          configMap:
            name: netchecks-operator
