karpenter:
  podDisruptionBudget:
    name: karpenter
    maxUnavailable: 1

  podSecurityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000

  nodeSelector:
    kubernetes.io/os: linux

  # It is recommended that Karpenter is not scheduled on a node that it manages.
  # So, we leave it on a multi-AZ EKS managed node group with a desired capacity of two on demand nodes.
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: karpenter.sh/provisioner-name
                operator: DoesNotExist
          - matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                  - ON_DEMAND
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - topologyKey: "kubernetes.io/hostname"

  controller:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL

    outputPaths:
      - stdout
    errorOutputPaths:
      - stderr
  webhook:
    logLevel: error
    port: 8443

  logLevel: debug
  logEncoding: json

  settings:
    aws:
      clusterName: "eks-blueprint"
      nodeNameConvention: "ip-name"
      tags:
        Name: "eks-blueprint-karpenter-node"

  extraObjects:
    - apiVersion: karpenter.sh/v1alpha5
      kind: Provisioner
      metadata:
        name: default
      spec:
        startupTaints:
          - key: node.cilium.io/agent-not-ready
            value: "true"
            effect: NoExecute
        requirements:
          - key: karpenter.sh/capacity-type
            operator: In
            values: ["on-demand"]
        limits:
          resources:
            cpu: 1000
        providerRef:
          name: default
        consolidation:
          enabled: true
    - apiVersion: karpenter.k8s.aws/v1alpha1
      kind: AWSNodeTemplate
      metadata:
        name: default
      spec:
        amiFamily: Bottlerocket
        subnetSelector:
          karpenter.sh/discovery: "eks-blueprint"
        securityGroupSelector:
          karpenter.sh/discovery: "eks-blueprint"
